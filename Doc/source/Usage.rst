关于该项目的用法：
==================

主窗口1：
------------------
在刚开始运行的时候，屏幕上会出现一个UI界面。在这个界面上有三个输入框，第一个是“出发地”，第二个是“目的地”，第三个是“出发日期”。

在这三个输入框中，分别输入你想要查询的出发地、目的地和出发日期。

如果你不确定你输入的是否正确，可以点击旁边的“查询车站”或“选择日期”按钮。

如果你确定你输入的信息，可以直接点击主窗口下的“确认”按钮直接开始查票。

（主窗口1中的复窗口）
当点击“查询车站”时，在弹出的窗口中间有一个输入框，输入你需要查询的车站。在输入完成后点击窗口顶部的“查询车站”按钮，如果你的输入是正确的话，会出现一个标签，上面显示的内容应和您输入的车站名一致。在确认无误后请点击确定；当点击“选择日期”时，在弹出的窗口中有三个输入框，输入你出发的年月日。在三个输入框的下面有当前的精确日期和时间，在确认时间输入无误后请点击确定。

在所有信息都输入完毕后，由于程序的设定，项目根目录下会出现一个temp文件夹。如果刚才的程序没肉任何的执行错误的话在这个文件夹中会有三个文件，分别是：

.. code-block::

    data_socket_start_station.log  # 存储输入的启示站点
    data_socket_end_station.log    # 存储输入的终点站
    data_socket_start_date.log     # 存储输入的查询日期

这里需要特别提醒一下，如果你是通过查询窗口保存的这些信息，在三个窗口全部通过“确定”结束后需要点一次主窗口上的“同步选择信息（必选）”按钮，（否则如果你直接点击主窗口中的“确认”开始查票的话，之前在复窗口中确认的信息就会被覆盖。）此时主窗口上的三个输入框都会同步上您刚才确定的信息。（当然，如果你在主窗口中就已经填好了信息，直接点击的“确认”按钮后就不需要任何其他操作了，因为这时程序已经开始查票了。）

如果您是直接在窗口中输入的信息，这里就可以直接点击主窗口中的“确认”按钮开始查票了（依旧会生成temp文件夹和那三个文件）。

（主窗口1中的复窗口）
值得注意的是在主窗口1中右边中间部分还有一个“登录”选项，这并不一定立即就要求选。如果你现在没有选择该选项，在后续的抢票过程中一样会要求登录。不过如果你立即选择了该选项，就会弹出一个窗口，里面有3个输入框，第一个是"用户名/邮箱/手机号"；第二个是"密码"；第三个是"身份证后4位"。在确认您的个人登录信息填写无误后就可以点击底部的确认按钮了。

.. code-block::

    data_socket_user_sign_in_info.log  # 存储登录的个人信息

主窗口2：
------------------
在点击了确认按钮后，等待10几秒，会弹出第二个窗口。这个窗口上应该是查询到的当天的所有车次的信息列表。

.+--------+----------------+---------------------+------------------+------------------+----------+------------+

|  车次  | 列车始发/终点站 |        余票情况      | 选择的始发／终点站 | 列车始发／终到时间 |  中途耗时 | 列车编号  |

.+========+================+======================+=================+==================+==========+============+

|  G1234 |  广州东－福田   |      允许继续购票     |  广州新塘－深圳北  |   06:08－07:26   |   01:18  |     1    |

.+========+================+======================+=================+==================+==========+============+

|  D901  |  北京西－深圳北 | 票已售罄，无法继续购票 |     广州－深圳     |   06:37－08:06  |   01:29   |    2    |

.+========+================+======================+=================+==================+==========+============+

|  C7011 |  广州东－深圳   |       该票未起售      |     广州东－深圳   |  24:00－24:00   |   99:59   |    3    |

.+--------+----------------+----------------------+-----------------+------------------+----------+------------+

这是在车次列表中可能会出现的显示情况（表格中的信息不一定完全属实，仅展示显示可能信息和格式）。

（注：这里的选择的始发/终点站和列车的始发/终点站不一样。比如你选择的是广州南到深圳北，此时系统会根据你的始发终点站在同城内找到所有的车站排列组合。但列车始发终点站和你搜索的始发终点站无关，这个是由铁路局决定的。）

第一个“车次”是当天在查询铁路段的所有车次；第二个“列车始发/终点站”是该列车的始发和终点站；第三个“余票情况”是该列车是否还有位置或该车次是否依然支持购票；第四个“选择的始发/终点站”是指你查询的始发和终点站；第五个“中途耗时”是你买到票后坐在车上的实际时间；最后第六个“列车编号”是实时生成的车次编号，方便在车次过多的情况下快速定位等。

最后，在确定您需要购买的车次后可以看到在主窗口2的顶部有一个输入空间。我们提供了两种定位车票的方式，一种是输入车次末尾的“列车编号”对应的数字；一种是通过输入车次（不太推荐）。程序会自动检测您输入的是那种定位方式。

（注：有的时候，在您查询的铁路段上很多同车次的情况。比如有一趟C7011的广深城际列车，他在广州境内即停靠广州东站，又停靠广州新塘站；在深圳境内即停靠深圳北站，又停靠福田站。此时就可能会出现相同车次号的4张不同票（2^2种情况）。所以此时我们无法确定您选择的到底是那张票，所以在处理用车次号定位的时候我们会对所有出现的情况次数除以2再做int操作，也就是默认取同车次列表中中间的票。详细请看源代码：）

.. code-block::

    ...
    def get_train_ticket_button(self):
        self.select_info_list=None
        self.reflex_table_keys=list(self.reflex_table.keys())
        self.reflex_table_values=list(self.reflex_table.values())
        if self.condition == "1":
            self.index = self.reflex_table_values.index(self.train_code-1)
            self.range_value = self.reflex_table_keys[self.index]+1
            for index in range(self.range_value):
                self.train_code_index += 2
            self.select_info_list=[self.train_code_list[self.train_code-1], self.train_start_time,
                                   self.period_start_station, self.period_end_station]
        elif self.condition == "2":
            self.ticket_index=int(len(self.choose_index_train)/2)  # 这里是重点，我们在不确定您在多次相同的车次下选择的具体哪列车时会取中间值
            self.index = self.reflex_table_values.index(self.choose_index_train[self.ticket_index])
            self.range_value = self.reflex_table_keys[self.index]+1
            for index in range(self.range_value):
                self.train_code_index += 2
            self.select_info_list=[self.train_code, self.train_start_time[self.ticket_index],
                                   self.period_start_station[self.ticket_index], self.period_end_station[self.ticket_index]]
        print(self.train_code_index)
        ...

我们可以看到，我们在处理的过程中如果您输入的是“列车编号”那么就会直接定位车票；而在输入车次号的时候则是取中间值进行的定位。

在确认车票信息后请点击主窗口2左上角的“确认”开始下一步抢票。

值得注意的是在确认好车次等信息后在temp文件夹下会继续多出一个文件：

.. code-block::

    data_socket_train_code.log  # 用于存储选择的车次信息

接下来的操作：
------------------
在结束窗口2的操作之后，屏幕上应该会出现一个浏览器，上面是12306官网画面。

因为本项目主要是通过自动化操作12306官网实现的抢票，因此整个抢票过程会被加速。其中就是通过selenium使用对应的浏览器驱动启动对应浏览器实现加速

当然，项目有自带的总共3种不同的浏览器驱动：

.. code-block::

    chromedriver      # 在Linux上使用的chrome系列浏览器驱动
    chromedriver.exe  # 在Windows上使用的chrome系列浏览器驱动
    geckodriver       # 在Linux上使用的Firefox系列浏览器驱动
    geckodriver.exe   # 在Windows上使用的Firefox系列浏览器驱动
    msedgedriver      # 在Linux上使用的MS-Edge系列浏览器驱动
    msedgedriver.exe  # 在Windows上使用的MS-Edge系列浏览器驱动

当然，他们都是默认64位操作系统和x86-64处理器上使用的驱动。

如果你的处理器或操作系统等不是默认规格的，可以手动更换浏览器驱动。但请将更换的驱动名字同样替换为以上的出现的名字，否则可能出现一些不可预知的错误。

在弹出的浏览器画面中，你应该可以看到驱动器正在自动操作页面。此时你需要做的就是稍等片刻。

在几秒后我们会检查你是否已经登录。这一步我们是靠检查在temp目录下是否有“data_socket_user_sign_in_info.log”文件判断您有没有提前登录。如果没有，在这里我们会要求您现在登录，依旧会弹出登录输入信息的窗口。但如果您已经提前登录，这一步就会省去，直接进行下一步抢票。

在登录结束后，就会跳到验证码环节。这是在每次登录都会经历的过程，且每次买票都不可避免。同样，输入验证码完成后就可以接着点击确认进入后续抢票了。

如果你输入错误的输入了验证码，我们会要求你重新输入。如果你输入错了个人登录信息，我们会要求你重新登录。

最后，就可以等待抢票结束了。在抢票过程中如果有遇到错误，都应该会弹出窗口提示你。如果没有，请一定记得到我们的GitHub仓库issues区反应该问题。

在抢票正式结束后，会有一个窗口提示你抢票成功。然后您就可以在12306官网上支付您的车票费用了。

最后：
------------------

再次感谢您使用该抢票工具，希望您能成功抢到回家的车票！
